# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration

parameters:
  rabbitmq_host: 'localhost:15672'
  rabbitmq_user: 'guest'
  rabbitmq_password: 'guest'
  rabbitmq_statuslayer_vhost: 'example'
services:
    old_sound_rabbit_mq:
        connections:
            host:     'localhost'
            port:     5672
            user:     'guest'
            password: 'guest'
            vhost:    '/'
            lazy:     false
            connection_timeout: 3
            read_write_timeout: 3

            # requires php-amqplib v2.4.1+ and PHP5.4+
            keepalive: false

            # requires php-amqplib v2.4.1+
            heartbeat: 0

            #requires php_sockets.dll
            use_socket: true # default false

        consumers:
            message_create:
                connection:       default
                exchange_options: { name: message_create_ex, type: fanout }
                queue_options:
                    name: message_create_qu
                    arguments:
                        x-dead-letter-exchange:    ['S', 'message_create_dead_letter_ex']
                        x-dead-letter-routing-key: ['S', 'message_create_dead_letter_qu']
                callback:         app.consumer.message_create
            message_create_dead_letter:
                connection:       default
                exchange_options: { name: message_create_dead_letter_ex, type: fanout }
                queue_options:    { name: message_create_dead_letter_qu }
                callback:         app.consumer.message_create_dead_letter
#    app.hello_controller:
#        class: api\controllers\ComponentController
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.
    App\Command\ExampleCommand:
        tags:
            - { name: 'console.command', command: 'app:example' }

    Component.controller:
        class: App\Controller\ComponentController
        public: true
        tags: ['controller.service_arguments']
    sunmedia.controller:
        class: App\IO\Api\SunmediaController
        arguments: ['@tactician.commandbus','@request_stack']



    App\Domain\Components\UseCases\CreateComponent\CreateComponentHandler:
        class:  App\Domain\Components\UseCases\CreateComponent\CreateComponentHandler
        arguments: ['@Component_creator']
        tags:
        - { name: tactician.handler, command: App\Domain\Components\UseCases\CreateComponent\ComponentCommand , typehints: true}


    component_repository:
        class : App\Domain\Components\Domain\Component\ComponentRepository
    components_repository_doctrine:
        class: App\Domain\Components\Persistance\ComponentsPersistance
        arguments: ['@Doctrine\Common\Persistence\ManagerRegistry',App\Domain\Components\Domain\ComponentDomain\Component , '@doctrine.orm.entity_manager']
    Component_creator:
        class: App\Domain\Components\UseCases\CreateComponent\ComponentCreator
        arguments: ['@components_repository_doctrine' ,'@components_repository_doctrine','@event_domain.publisher']
    App\Domain\Components\Domain\Component\Components\ComponentsVO\ComponentId:
        class: App\Domain\Components\Domain\Component\Components\ComponentsVO\ComponentId
        arguments: ['@rampsey_id']


    event_domain_exception.listener:
        class: App\Domain\Components\Exception\ExceptionDomainListener
        tags :
        - { name: tactician.handler, event: kernel.exception , method: onDomainException}
    event_domain.publisher:
        class: App\IO\Events\DomainEventPublisherRabbitMq
